/**
   \class    standalone_LumiReWeighting standalone_LumiReWeighting.h "PhysicsTools/Utilities/interface/standalone_LumiReWeighting.h"
   \brief    Class to provide lumi weighting for analyzers to weight "flat-to-N" MC samples to data
   This class will trivially take two histograms:
   1. The generated "flat-to-N" distributions from a given processing (or any other generated input)
   2. A histogram generated from the "estimatePileup" macro here:
   https://twiki.cern.ch/twiki/bin/view/CMS/LumiCalc#How_to_use_script_estimatePileup
   and produce weights to convert the input distribution (1) to the latter (2).
   \author Salvatore Rappoccio, modified by Mike Hildreth
  
*/
#ifndef standalone_LumiReWeighting_h
#define standalone_LumiReWeighting_h
#include "TH1.h"
#include "TFile.h"
#include <string>
#include "TH1.h"
#include "TFile.h"
#include <string>
#include <vector>
#include <TROOT.h>
#include <string>
#include <iostream>

using namespace std;

class standalone_LumiReWeighting {
 public:

  //year codes for 2015 data: 201550: 2015 50ns, 201525: 2015 runD (25ns) golden; 2015250: 2015 run D (25ns) silver. 
  //year codes for 2016 data: 2016
  standalone_LumiReWeighting(int year=2016,int mode=0); // 0: central, -1: down, +1: up
  virtual ~standalone_LumiReWeighting();
  double weight( int npv) ;
  void weightOOT_init();

 protected:

  TH1F*      weights_;


};

//#include "standalone_LumiReWeighting.h"

double Data2015D_80[50]= {2.73184e-05,0.000202145,0.000274231,0.000248357,0.000392347,0.000514479,0.00086976,0.00250223,0.0128133,0.045297,0.0902638,0.133534,0.164797,0.17194,0.150296,0.108843,0.0650966,0.0322696,0.0133538,0.00464994,0.00137314,0.000347087,7.5965e-05,1.4567e-05,2.47265e-06,3.75395e-07,5.17365e-08,6.61067e-09,8.0002e-10,9.26438e-11,1.01978e-11,1.0484e-12,9.88331e-14,8.42797e-15,6.4453e-16,4.40098e-17,2.64709e-18,1.33536e-19,0,0,0,0,0,0,0,0,0,0,0,0};
//with 80 mb as x-sec

double Data2015D_up[50] = {4.86801e-05,0.000291818,0.000292546,0.000401071,0.000583911,0.000980381,0.00334238,0.021507,0.0741792,0.13778,0.190437,0.209807,0.182905,0.124071,0.0652032,0.0267291,0.0086465,0.00223385,0.000467109,8.04181e-05,1.16065e-05,1.42659e-06,1.52007e-07,1.44338e-08,1.26362e-09,1.0411e-10,8.00675e-12,5.59363e-13,3.45589e-14,1.85493e-15,8.55896e-17,3.34497e-18,1.07168e-19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
double  Data2015D_dn[50] = {4.40439e-05,0.000264025,0.000264684,0.000362873,0.000528301,0.000887012,0.00302406,0.0194587,0.0671145,0.124658,0.1723,0.189825,0.165486,0.112255,0.0589934,0.0241835,0.00782303,0.0020211,0.000422622,7.27592e-05,1.05011e-05,1.29073e-06,1.3753e-07,1.30592e-08,1.14328e-09,9.41947e-11,7.2442e-12,5.06091e-13,3.12676e-14,1.67827e-15,7.74382e-17,3.0264e-18,9.69613e-20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

double Data2015D[50]={4.6362e-05, 0.000277922, 0.000278615, 0.000381972, 0.000556106, 0.000933697, 0.00318322, 0.0204829, 0.0706469, 0.131219, 0.181369, 0.199816, 0.174196, 0.118163, 0.0620983, 0.0254563, 0.00823477, 0.00212748, 0.000444866, 7.65886e-05, 1.10538e-05, 1.35866e-06, 1.44768e-07, 1.37465e-08, 1.20345e-09, 9.91523e-11, 7.62547e-12, 5.32727e-13, 3.29133e-14, 1.7666e-15, 8.15139e-17, 3.18569e-18, 1.02065e-19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

double Data2015DSilver[50] = {109321, 541944, 779580, 1.10128e+06, 1.85481e+06, 4.09823e+06, 1.18448e+07, 4.39493e+07, 1.3208e+08, 2.44005e+08, 3.3214e+08, 3.73699e+08, 3.5247e+08, 2.72791e+08, 1.7128e+08, 8.80155e+07, 3.83846e+07, 1.57611e+07, 7.31821e+06, 3.99573e+06, 2.10662e+06, 914132, 310501, 83489.8, 18859.5, 3989.74, 874.533, 199.374, 44.444, 9.25654, 1.7713, 0.310153, 0.0496579, 0.0072691, 0.000972845, 0.000119034, 1.33157e-05, 1.3617e-06, 1.27294e-07, 1.07866e-08, 8.82446e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0};
//with 71 mb as x-sec

double Data2015DGolden[50] = {120910.3, 579850.1, 824390.1, 1187012, 2093643, 4915254, 1.531566e+07, 5.896087e+07, 1.631124e+08, 2.795684e+08, 3.638473e+08, 3.930841e+08, 3.518993e+08, 2.550269e+08, 1.487147e+08, 7.09417e+07, 2.931407e+07, 1.213957e+07, 5928946, 3149223, 1474618, 547572.7, 159716.8, 38873.2, 9106.34, 2437.593, 780.4537, 279.2985, 105.0297, 39.9417, 14.94845, 5.40612, 1.869305, 0.6145993, 0.1916386, 0.05660356, 0.01582917, 0.004190243, 0.001049915, 0.0002489961, 5.589224e-05, 1.1875e-05, 2.388033e-06, 4.545431e-07, 8.189424e-08, 1.395983e-08, 2.260466e-09, 3.390078e-10, 6.163553e-11, 0};
//with 69 mb as x-sec

double Data2015DGolden_new[50] = {1.0769260e+05, 5.3733720e+05, 7.7448510e+05, 1.0905740e+06, 1.8285310e+06, 4.0264860e+06, 1.1574540e+07, 4.2524360e+07, 1.2894110e+08, 2.4127520e+08, 3.3166980e+08, 3.7754140e+08, 3.6202950e+08, 2.8622120e+08, 1.8397810e+08, 9.6613290e+07, 4.2704240e+07, 1.7419840e+07, 7.8550420e+06, 4.2080080e+06, 2.2357560e+06, 9.9183180e+05, 3.4601680e+05, 9.5484500e+04, 2.1989560e+04, 4.6871300e+03, 1.0277380e+03, 2.3538950e+02, 5.3104170e+01, 1.1239780e+01,  2.1895840e+00, 3.9068370e-01, 6.3790610e-02, 9.5300720e-03, 1.3026630e-03, 1.6291420e-04, 1.8641030e-05, 1.9514090e-06, 1.8688800e-07, 1.6348360e-08, 1.2875530e-09, 5.5246920e-11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0};
//with 71.3 mb as x-sec (FSQ-15-005)

double Data2015DGolden_up[50] = {126472,606523,862312,1241614,2189950,5141355,1.602000e+07,6.167307e+07,1.706155e+08,2.924285e+08,3.805842e+08,4.111659e+08,3.680866e+08,2.667581e+08,1.555555e+08,7.420501e+07,3.066251e+07,1.269799e+07,6201677,3294087,1542450,572761,167063,40661,9525,2545,816,292,110,42,15.6,5.654,1.955,0.6429,0.2004,0.0592,0.0165,0.0043,0.0011,0.00026,0,0,0,0,0,0,0,0,0,0};

double Data2015DGolden_new_up[50] = {89190.53,486650.8,719957.2,973882.4,1519576,3020940,7685343,2.494457e+07,8.29238e+07,1.821487e+08,2.77126e+08,3.421561e+08,
3.614974e+08,3.247098e+08,2.431348e+08,1.507492e+08,7.810018e+07,3.498115e+07,1.490264e+07,7103801,3946918,2162696,1006521,376804.8,113643.9,28757.42,6635.236,1542.428,
375.7776,92.17735,21.62775,4.730091,0.9564624,0.1784864,0.03072833,0.004880291,0.0007150218,9.663959e-05,1.2049e-05,1.385773e-06,1.469287e-07,1.441813e-08,1.268763e-09,
7.403689e-11,0.0,0.0,0.0,0.0,0.0,0.0};

double Data2015DGolden_dn[50] = {115348,553176,786468,1132409,1997335,4689152,1.461000e+07,5.624866e+07,1.556092e+08,2.667082e+08,3.471103e+08,3.750022e+08,3.357119e+08,2.432956e+08,1.418738e+08,6.767838e+07,2.796561e+07,1.158114e+07,5656214,3004358,1406785,522384,152369,37085,8687,2326,744,267,100,38,14.2,5.157,1.783,0.5863,0.1828,0.0540,0.0151,0.0040,0.0010,0.00023,0,0,0,0,0,0,0,0,0,0};

double Data2015DGolden_new_dn[50] = {127745.2,595428.5,842478.6,1240995,2269442,5635968,1.881578e+07,7.366303e+07,1.891832e+08,3.059873e+08,3.826029e+08,3.956211e+08,
3.338916e+08,2.248717e+08,1.206873e+08,5.292579e+07,2.068457e+07,8769106,4505376,2313236,972272.8,313118,78188.77,16253.21,3194.317,657.9933,139.688,28.46015,5.33838,
0.9102266,0.1407139,0.01971525,0.002503344,0.00028806,3.003889e-05,2.838526e-06,2.430567e-07,1.884696e-08,1.299952e-09,4.28485e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};

double Data2015DSilver_dn[50] = {103855,514847,740601,1.04622e+06,1.76207e+06,3.89332e+06,1.12525e+07,4.17519e+07,1.25476e+08,2.31805e+08,3.15533e+08,3.55014e+08,3.34847e+08,2.59151e+08,1.62716e+08,8.36147e+07,3.64654e+07,1.4973e+07,6.9523e+06,3.79594e+06,2.00129e+06,868426,294976,79315.3,17916.6,3790.26,830.806,189.405,42.2218,8.79371,1.68273,0.294645,0.047175,0.00690564,0.000924203,0.000113082,1.26499e-05,1.29361e-06,1.20929e-07,1.02473e-08,8.38324e-10,0,0,0,0,0,0,0,0,0};

double Data2015DSilver_up[50] = {114787,569041,818559,1.15635e+06,1.94755e+06,4.30314e+06,1.2437e+07,4.61468e+07,1.38684e+08,2.56206e+08,3.48746e+08,3.92384e+08,3.70094e+08,2.8643e+08,1.79844e+08,9.24163e+07,4.03038e+07,1.65491e+07,7.68412e+06,4.19551e+06,2.21195e+06,959839,326026,87664.3,19802.5,4189.23,918.259,209.343,46.6662,9.71937,1.85986,0.32566,0.0521407,0.00763255,0.00102149,0.000124986,1.39814e-05,1.42978e-06,1.33659e-07,1.13259e-08,9.26569e-10,0,0,0,0,0,0,0,0,0};

double Data2016Golden[125] = {238797, 837542.9, 2308427, 3124754, 4476191, 5995911, 7000896, 1.289165e+07, 3.526173e+07, 7.870123e+07, 1.769458e+08, 3.600895e+08, 6.027665e+08, 8.765194e+08, 1.174474e+09, 1.489059e+09, 1.759352e+09, 1.943926e+09, 2.049172e+09, 2.101582e+09, 2.132787e+09, 2.149099e+09, 2.128986e+09, 2.062649e+09, 1.962884e+09, 1.841872e+09, 1.704136e+09, 1.554523e+09, 1.399489e+09, 1.243533e+09, 1.088821e+09, 9.373048e+08, 7.920441e+08, 6.567177e+08, 5.344668e+08, 4.271268e+08, 3.351056e+08, 2.577246e+08, 1.937514e+08, 1.418309e+08, 1.006714e+08, 6.901386e+07, 4.554008e+07, 2.884748e+07, 1.750632e+07, 1.016264e+07, 5637781, 2987282, 1512002, 731845.4, 339822, 152545.4, 67404.82, 30489.69, 15152.11, 8975.911, 6496.155, 5434.805, 4889.958, 4521.716, 4208.464, 3909.763, 3614.274, 3320.722, 3031.096, 2748.237, 2474.977, 2213.817, 1966.815, 1735.546, 1521.109, 1324.149, 1144.898, 983.2202, 838.6676, 710.5336, 597.9098, 499.7392, 414.8663, 342.082, 280.1624, 227.9014, 184.1373, 147.7726, 117.7887, 93.25467, 73.33219, 57.27639, 44.43378, 34.23791, 26.20338, 19.9188, 15.03919, 11.27823, 8.400634, 6.214952, 4.566859, 3.333123, 2.416231, 1.739717, 1.244147, 0.8837248, 0.6234687, 0.4368819, 0.304064, 0.2101925, 0.1443179, 0.09841784, 0.06666193, 0.04484685, 0.02996649, 0.01988791, 0.01310968, 0.008583092, 0.005581416, 0.003604903, 0.002312551, 0.001473456, 0.0009324613, 0.0005861009, 0.0003658993, 0.000226881, 0.0001397275, 8.546985e-05, 5.192671e-05};
//with 69.2mb as x-sec (Metin, from pileup twiki)

double Data2016Golden_up[125] = {232683.1, 659469.5, 2183870, 2745817, 4071554, 5399909, 6385964, 9041697, 2.378256e+07, 5.400185e+07, 1.160124e+08, 2.460465e+08, 4.433764e+08, 6.801008e+08, 9.378589e+08, 1.218809e+09, 1.50169e+09, 1.730463e+09, 1.882647e+09, 1.968689e+09, 2.012668e+09, 2.040373e+09, 2.054739e+09, 2.036914e+09, 1.978317e+09, 1.889437e+09, 1.781252e+09, 1.657948e+09, 1.523143e+09, 1.382248e+09, 1.239674e+09, 1.097676e+09, 9.577106e+08, 8.219349e+08, 6.933169e+08, 5.748257e+08, 4.68639e+08, 3.757723e+08, 2.961771e+08, 2.290778e+08, 1.733823e+08, 1.279647e+08, 9.17574e+07, 6.370686e+07, 4.270414e+07, 2.757313e+07, 1.711861e+07, 1.020579e+07, 5837524, 3201829, 1684026, 849969, 412581.5, 193615.1, 88891.36, 40974.85, 19936.6, 11013.4, 7298.96, 5723.065, 4985.533, 4560.541, 4244.792, 3963.568, 3691.523, 3421.666, 3153.597, 2889.128, 2630.654, 2380.541, 2140.893, 1913.458, 1699.602, 1500.307, 1316.191, 1147.53, 994.2979, 856.2033, 732.7331, 623.1949, 526.7585, 442.4958, 369.417, 306.5032, 252.734, 207.1108, 168.6757, 136.5252, 109.8205, 87.7939, 69.75179, 55.07523, 43.21823, 33.70443, 26.1226, 20.12124, 15.40287, 11.71809, 8.85973, 6.657203, 4.971307, 3.689408, 2.721132, 1.99457, 1.452965, 1.051882, 0.7568067, 0.5411383, 0.3845357, 0.2715627, 0.1905936, 0.1329385, 0.09215045, 0.06348164, 0.04346127, 0.0295706, 0.01999499, 0.01343647, 0.008973298, 0.005955545, 0.003928198, 0.002574942, 0.001677427, 0.001085979, 0.0006987167};
//with 69.2mb + %4.6 as x-sec (Metin, from pileup twiki)

double Data2016Golden_dn[125] = {247408.7, 1069214, 2428245, 3566876, 4991685, 6592990, 8096912, 1.996092e+07, 5.191008e+07, 1.197673e+08, 2.727459e+08, 5.131262e+08, 8.022785e+08, 1.118695e+09, 1.462916e+09, 1.780146e+09, 2.005132e+09, 2.135028e+09, 2.198451e+09, 2.233931e+09, 2.252533e+09, 2.2297e+09, 2.154207e+09, 2.041692e+09, 1.905627e+09, 1.751113e+09, 1.584631e+09, 1.413642e+09, 1.242572e+09, 1.073682e+09, 9.098191e+08, 7.551503e+08, 6.139337e+08, 4.891657e+08, 3.820187e+08, 2.920884e+08, 2.180386e+08, 1.582419e+08, 1.111195e+08, 7.515025e+07, 4.87546e+07, 3.024635e+07, 1.790095e+07, 1.008984e+07, 5410208, 2758284, 1337443, 617797.6, 273138.8, 116942.4, 49859.98, 22465.64, 11743.57, 7638.636, 6018.585, 5280.96, 4837.555, 4483.996, 4154.032, 3829.045, 3506.22, 3187.679, 2876.816, 2577.045, 2291.368, 2022.216, 1771.414, 1540.186, 1329.193, 1138.586, 968.0713, 816.9839, 684.3606, 569.0134, 469.5982, 384.6778, 312.777, 252.4292, 202.2142, 160.7869, 126.8986, 99.40994, 77.29821, 59.65893, 45.70331, 34.75246, 26.22944, 19.64978, 14.61137, 10.78422, 7.900425, 5.744812, 4.146335, 2.970406, 2.112174, 1.490752, 1.044343, 0.7261761, 0.5011893, 0.3433382, 0.2334548, 0.157559, 0.1055464, 0.07017827, 0.04631491, 0.03033875, 0.01972572, 0.01272993, 0.008154115, 0.005184242, 0.00327153, 0.002049149, 0.001273951, 0.0007861199, 0.000481483, 0.0002927044, 0.0001766174, 0.0001057775, 6.287945e-05, 3.710048e-05, 2.172728e-05, 1.262951e-05, 7.286554e-06, 4.172663e-06, 2.371682e-06};
//with 69.2mb - %4.6 as x-sec (Metin, from pileup twiki)

double MC_2016_25ns_Moriond17[125] = {1.78653e-05, 2.56602e-05, 5.27857e-05, 8.88954e-05, 0.000109362, 0.000140973, 0.000240998, 0.00071209, 0.00130121, 0.00245255, 0.00502589, 0.00919534, 0.0146697, 0.0204126, 0.0267586, 0.0337697, 0.0401478, 0.0450159, 0.0490577, 0.0524855, 0.0548159, 0.0559937, 0.0554468, 0.0537687, 0.0512055, 0.0476713, 0.0435312, 0.0393107, 0.0349812, 0.0307413, 0.0272425, 0.0237115, 0.0208329, 0.0182459, 0.0160712, 0.0142498, 0.012804, 0.011571, 0.010547, 0.00959489, 0.00891718, 0.00829292, 0.0076195, 0.0069806, 0.0062025, 0.00546581, 0.00484127, 0.00407168, 0.00337681, 0.00269893, 0.00212473, 0.00160208, 0.00117884, 0.000859662, 0.000569085, 0.000365431, 0.000243565, 0.00015688, 9.88128e-05, 6.53783e-05, 3.73924e-05, 2.61382e-05, 2.0307e-05, 1.73032e-05, 1.435e-05, 1.36486e-05, 1.35555e-05, 1.37491e-05, 1.34255e-05, 1.33987e-05, 1.34061e-05, 1.34211e-05, 1.34177e-05, 1.32959e-05, 1.33287e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}; 


double MC_startup_50ns[50]={        4.71E-09,
                                    2.86E-06,
                                    4.85E-06,
                                    1.53E-05,
                                    3.14E-05,
                                    6.28E-05,
                                    1.26E-04,
                                    3.93E-04,
                                    1.42E-03,
                                    6.13E-03,
                                    1.40E-02,
                                    2.18E-02,
                                    2.94E-02,
                                    4.00E-02,
                                    5.31E-02,
                                    6.53E-02,
                                    7.64E-02,
                                    8.42E-02,
                                    8.43E-02,
                                    7.68E-02,
                                    6.64E-02,
                                    5.69E-02,
                                    4.94E-02,
                                    4.35E-02,
                                    3.84E-02,
                                    3.37E-02,
                                    2.92E-02,
                                    2.49E-02,
                                    2.10E-02,
                                    1.74E-02,
                                    1.43E-02,
                                    1.16E-02,
                                    9.33E-03,
                                    7.41E-03,
                                    5.81E-03,
                                    4.49E-03,
                                    3.43E-03,
                                    2.58E-03,
                                    1.91E-03,
                                    1.39E-03,
                                    1.00E-03,
                                    7.09E-04,
                                    4.93E-04,
                                    3.38E-04,
                                    2.28E-04,
                                    1.51E-04,
                                    9.83E-05,
                                    6.29E-05,
                                    3.96E-05,
                                    2.45E-05};


double MC_startup_25ns[50]={ 
                0.000108643,
                0.000388957,
                0.000332882,
                0.00038397,
                0.000549167,
                0.00105412,
                0.00459007,
                0.0210314,
                0.0573688,
                0.103986,
                0.142369,
                0.157729,
                0.147685,
                0.121027,
                0.08855,
                0.0582866,
                0.0348526,
                0.019457,
                0.0107907,
                0.00654313,
                0.00463195,
                0.00370927,
                0.0031137,
                0.00261141,
                0.00215499,
                0.00174491,
                0.00138268,
                0.00106731,
                0.000798828,
                0.00057785,
                0.00040336,
                0.00027161,
                0.000176535,
                0.00011092,
                6.75502e-05,
                4.00323e-05,
                2.32123e-05,
                1.32585e-05,
                7.51611e-06,
                4.25902e-06,
                2.42513e-06,
                1.39077e-06,
                8.02452e-07,
                4.64159e-07,
                2.67845e-07,
                1.5344e-07,
                8.68966e-08,
                4.84931e-08,
                2.6606e-08,
                1.433e-08
};



double Data2012_1601[60]={6.2096e-07,1.64898e-06,4.66814e-06,1.70933e-05,3.1247e-05,0.000151821,0.000886383,0.00271439,0.00654889,0.0130144,0.0224427,0.0345402,0.0445248,0.0505197,0.054562,0.0575821,0.0593314,0.0598531,0.0596082,0.0588155,0.0575659,0.055995,0.0541466,0.0517884,0.0485093,0.0440707,0.0386225,0.0325768,0.0263879,0.0204778,0.0152084,0.01081,0.0073478,0.00476356,0.00293508,0.00171433,0.000948935,0.000499122,0.000250857,0.00012146,5.72552e-05,2.66218e-05,1.24026e-05,5.89183e-06,2.90222e-06,1.49993e-06,8.16055e-07,4.65065e-07,2.74931e-07,1.66843e-07,1.03016e-07,6.42691e-08,4.0296e-08,2.52794e-08,1.58083e-08,9.82248e-09,6.04769e-09,3.68149e-09,2.21186e-09,1.30979e-09};
double Data2012_1601Up[60]={5.77766e-07,1.0878e-06,4.0892e-06,1.25546e-05,2.73904e-05,7.1698e-05,0.000482329,0.00167265,0.00414911,0.00874477,0.0155526,0.0251685,0.0358976,0.0437502,0.0485221,0.0519678,0.0545541,0.0560511,0.0565151,0.0563272,0.0556736,0.0546195,0.053274,0.0517058,0.0497996,0.0472444,0.0437578,0.0393167,0.0341714,0.0286826,0.023203,0.0180576,0.0135128,0.00972364,0.00672219,0.0044541,0.00282014,0.00170249,0.000979569,0.000538241,0.000283647,0.000144286,7.14377e-05,3.47813e-05,1.68595e-05,8.25302e-06,4.141e-06,2.15713e-06,1.17531e-06,6.69984e-07,3.97313e-07,2.43002e-07,1.51956e-07,9.6445e-08,6.17737e-08,3.9748e-08,2.55969e-08,1.64446e-08,1.05102e-08,6.66675e-09};
double Data2012_1601Down[60]={6.64022e-07,2.28767e-06,5.52347e-06,2.20918e-05,3.94586e-05,0.000299452,0.00145796,0.00418897,0.00972065,0.018376,0.0308387,0.0434795,0.051541,0.0564719,0.0601134,0.0623379,0.0630786,0.0628617,0.0619962,0.0605967,0.0588272,0.0567156,0.0539299,0.0499771,0.0446754,0.0383324,0.0314947,0.0247091,0.0184694,0.013148,0.0089116,0.00573776,0.00349543,0.00200776,0.00108629,0.000555024,0.000269451,0.000125465,5.67277e-05,2.52937e-05,1.13311e-05,5.20613e-06,2.49971e-06,1.26862e-06,6.80886e-07,3.83218e-07,2.23434e-07,1.33407e-07,8.08288e-08,4.93489e-08,3.01936e-08,1.8428e-08,1.11755e-08,6.71192e-09,3.98154e-09,2.3279e-09,1.33934e-09,7.57388e-10,4.20605e-10,2.29244e-10};

Double_t Ele_Jan2013_Central[60] = {12238.4,32502.1,89448.7,260312,524230,2.6615e+06,1.57489e+07,4.88939e+07,1.19465e+08,2.43265e+08,4.29338e+08,6.71368e+08,8.71877e+08,9.87852e+08,1.06108e+09,1.11724e+09,1.15207e+09,1.16278e+09,1.15716e+09,1.13979e+09,1.11266e+09,1.07876e+09,1.03971e+09,9.91838e+08,9.27814e+08,8.43258e+08,7.40655e+08,6.26902e+08,5.09645e+08,3.9657e+08,2.94928e+08,2.09692e+08,1.42498e+08,9.23628e+07,5.69232e+07,3.32769e+07,1.8448e+07,9.7236e+06,4.89898e+06,2.37798e+06,1.12355e+06,523398,244170,116089,57207,29569.8,16087.6,9167.68,5419.27,3288.54,2030.41,1266.7,794.2,498.233,311.567,193.591,119.194,72.5585,43.5935,25.8146};

Double_t Mu_Jan2013_Central[60] = {12238.4,32502.1,89450,260617,543077,2.97914e+06,1.72488e+07,5.06917e+07,1.18292e+08,2.38357e+08,4.2249e+08,6.64259e+08,8.67356e+08,9.84298e+08,1.05724e+09,1.11316e+09,1.14718e+09,1.15778e+09,1.15216e+09,1.13404e+09,1.1061e+09,1.07241e+09,1.03487e+09,9.88991e+08,9.2627e+08,8.41951e+08,7.38987e+08,6.24845e+08,5.07442e+08,3.94494e+08,2.93182e+08,2.08373e+08,1.41599e+08,9.18082e+07,5.66113e+07,3.3116e+07,1.83712e+07,9.68949e+06,4.88484e+06,2.37249e+06,1.12156e+06,522729,243961,116028,57190.8,29565.8,16086.8,9167.5,5419.23,3288.53,2030.41,1266.7,794.2,498.233,311.567,193.591,119.194,72.5585,43.5935,25.8146};

Double_t Nov2012_Central[60] = { 12238.3,32501.9,89449.6,260616,543074,2.97906e+06,1.7247e+07,5.06732e+07,1.1812e+08,2.36812e+08,4.12795e+08,6.32566e+08,8.10196e+08,9.08233e+08,9.67764e+08,1.01568e+09,1.046e+09,1.05573e+09,1.0491e+09,1.02804e+09,9.9728e+08,9.62081e+08,9.23545e+08,8.77362e+08,8.16772e+08,7.38343e+08,6.44644e+08,5.4167e+08,4.36101e+08,3.35059e+08,2.45401e+08,1.71628e+08,1.14806e+08,7.34147e+07,4.47675e+07,2.59638e+07,1.43107e+07,7.51341e+06,3.77855e+06,1.83544e+06,869909,406676,189518,88841.9,42160.5,20306.4,9911.73,4878.77,2404.86,1178.23,569.849,270.54,125.543,56.7699,24.9629,10.6588,4.4152,1.77316,0.690103,0.260206};

Double_t Nov2012_Low[60] = { 13087,45090.6,103115,333769,729427,5.87874e+06,2.80458e+07,7.66963e+07,1.75472e+08,3.36964e+08,5.6628e+08,7.93236e+08,9.30927e+08,1.00466e+09,1.06098e+09,1.09893e+09,1.11261e+09,1.10659e+09,1.08361e+09,1.04928e+09,1.0099e+09,9.66263e+08,9.12358e+08,8.40237e+08,7.47487e+08,6.38954e+08,5.22504e+08,4.06581e+08,3.00052e+08,2.10149e+08,1.40005e+08,8.87639e+07,5.34336e+07,3.04422e+07,1.63895e+07,8.35552e+06,4.05845e+06,1.89617e+06,862296,386564,172934,77993.7,35694.7,16605.9,7828.22,3713.85,1757.96,823.223,378.6,170.04,74.2799,31.4729,12.9108,5.12155,1.9631,0.726694,0.259699,0.0895752,0.0298138,0.00957399};

Double_t Nov2012_High[60] = {11387,21441,79825.7,200084,443810,1.39731e+06,9.44866e+06,3.19036e+07,7.56359e+07,1.57805e+08,2.84858e+08,4.62697e+08,6.56194e+08,7.94374e+08,8.69782e+08,9.2057e+08,9.62105e+08,9.88173e+08,9.96866e+08,9.91761e+08,9.74302e+08,9.47906e+08,9.17159e+08,8.83851e+08,8.45718e+08,7.9745e+08,7.34716e+08,6.57467e+08,5.69534e+08,4.76071e+08,3.82492e+08,2.94551e+08,2.17396e+08,1.54037e+08,1.04905e+08,6.86243e+07,4.30255e+07,2.57968e+07,1.47792e+07,8.10358e+06,4.27071e+06,2.17757e+06,1.08307e+06,530253,257881,125627,61711.5,30691.3,15466.6,7879.44,4038.7,2070.09,1054.4,530.666,262.665,127.406,60.4003,27.9351,12.5884,5.52232};

Double_t Summer2012_S10[60] = { 2.560E-06, 5.239E-06, 1.420E-05, 5.005E-05, 1.001E-04, 2.705E-04, 1.999E-03, 6.097E-03, 1.046E-02, 1.383E-02, 1.685E-02, 2.055E-02, 2.572E-02, 3.262E-02, 4.121E-02, 4.977E-02, 5.539E-02, 5.725E-02, 5.607E-02, 5.312E-02, 5.008E-02, 4.763E-02, 4.558E-02, 4.363E-02, 4.159E-02, 3.933E-02, 3.681E-02, 3.406E-02, 3.116E-02, 2.818E-02, 2.519E-02, 2.226E-02, 1.946E-02, 1.682E-02, 1.437E-02, 1.215E-02, 1.016E-02, 8.400E-03, 6.873E-03, 5.564E-03, 4.457E-03, 3.533E-03, 2.772E-03, 2.154E-03, 1.656E-03, 1.261E-03, 9.513E-04, 7.107E-04, 5.259E-04, 3.856E-04, 2.801E-04, 2.017E-04, 1.439E-04, 1.017E-04, 7.126E-05, 4.948E-05, 3.405E-05, 2.322E-05, 1.570E-05, 5.005E-06};

Double_t Summer2012_S7[60] = {7.82955e-09,2.34886e-08,1.47195e-06,9.53639e-06,2.34025e-05,0.000143704,0.000762496,0.00210611,0.00463138,0.00912077
,0.0168876,0.0295823,0.0437431,0.0535328,0.0583127,0.0604758,0.0608731,0.0596082,0.0576553,0.0559281,0.0542661,
0.052718,0.0513398,0.0499406,0.0480605,0.0451161,0.0409514,0.0355688,0.0294789,0.0232085,0.0175235,0.0127302,
0.00898657,0.00617424,0.00411405,0.00264675,0.00164175,0.000969502,0.000552312,0.000299535,0.000157969,7.94308e-05,
3.84274e-05,1.94721e-05,9.45809e-06,4.84649e-06,2.44282e-06,1.29188e-06,7.04659e-07,3.99307e-07,2.66205e-07,
1.25273e-07,1.09614e-07,3.91477e-08,4.69773e-08,4.69773e-08,1.56591e-08,1.56591e-08,0,0,};
double Data2012[60]={
12238.2,32255.7,64287.7,222968,487946,2.47713e+06,1.4766e+07,4.44367e+07,1.02754e+08,1.94785e+08,3.25867e+08,4.86418e+08,6.15299e+08,6.88662e+08,7.34856e+08,7.71983e+08,7.90034e+08,7.84055e+08,7.63383e+08,7.34002e+08,6.99429e+08,6.63169e+08,6.2787e+08,5.90571e+08,5.43027e+08,4.80163e+08,4.04441e+08,3.22911e+08,2.43214e+08,1.72144e+08,1.14644e+08,7.23911e+07,4.3768e+07,2.54757e+07,1.42378e+07,7.57403e+06,3.79979e+06,1.78907e+06,792005,332422,133997,52614.4,20370.4,7837.71,3005.93,1148.24,435.67,163.716,60.8204,22.3316,8.11181,2.91896,1.0414,0.368285,0.128918,0.0445702,0.0151809,0.00508254,0.00166966,0.00053755 };

double Data2012Down[60]={
13086.9,44573.1,75597,293668,621047,4.9627e+06,2.41796e+07,6.75848e+07,1.48933e+08,2.70449e+08,4.39928e+08,6.04128e+08,7.05872e+08,7.62483e+08,8.06487e+08,8.31453e+08,8.28038e+08,8.06076e+08,7.73662e+08,7.35171e+08,6.94927e+08,6.55747e+08,6.12765e+08,5.55923e+08,4.8121e+08,3.93868e+08,3.03191e+08,2.18271e+08,1.46631e+08,9.24274e+07,5.52799e+07,3.16541e+07,1.73547e+07,9.03137e+06,4.41161e+06,2.00916e+06,854168,342165,131095,48838.6,17936.6,6548.13,2382.12,862.067,309.278,109.667,38.383,13.2659,4.53433,1.53477,0.514543,0.170647,0.0558512,0.0179873,0.00568486,0.00175941,0.000532467,0.00015746,4.5487e-05,1.28368e-05 };

double Data2012Up[60]={
11386.9,21331.8,60739.1,166488,409754,1.13997e+06,8.0458e+06,2.76488e+07,6.6662e+07,1.3398e+08,2.29599e+08,3.61554e+08,5.01758e+08,6.02696e+08,6.59594e+08,6.99205e+08,7.31195e+08,7.46184e+08,7.40824e+08,7.22924e+08,6.97447e+08,6.67162e+08,6.34873e+08,6.03124e+08,5.71259e+08,5.3341e+08,4.83644e+08,4.21257e+08,3.50554e+08,2.77657e+08,2.0845e+08,1.47996e+08,9.96339e+07,6.40728e+07,3.96809e+07,2.37605e+07,1.372e+07,7.58333e+06,3.98016e+06,1.9744e+06,926199,413321,177237,73909,30311.3,12328.8,4995.94,2018.82,812.275,324.588,128.526,50.3667,19.5335,7.50397,2.85872,1.08078,0.405437,0.150752,0.0554593,0.0201443 };

Double_t Mu2012D_208686[60]= {
12238.4,32499.4,92002.9,336357,599531,2.98306e+06,1.74468e+07,5.3365e+07,1.28582e+08,2.55057e+08,4.39372e+08,6.76071e+08,8.72077e+08,9.90081e+08,1.06819e+09,1.12468e+09,1.15627e+09,1.16601e+09,1.16214e+09,1.14684e+09,1.12196e+09,1.09067e+09,1.05366e+09,1.00623e+09,9.4026e+08,8.51237e+08,7.42629e+08,6.2314e+08,5.02069e+08,3.87713e+08,2.86827e+08,2.03374e+08,1.38094e+08,8.95219e+07,5.5178e+07,3.22374e+07,1.78454e+07,9.38644e+06,4.71945e+06,2.28808e+06,1.08154e+06,505129,236772,113291,56216.4,29240.1,15984.3,9137.13,5410.74,3286.29,2029.85,1266.57,794.17,498.227,311.566,193.591,119.194,72.5585,43.5935,25.8146,
};

Double_t Mu2012D_208686Up[60]= {11531,22746.3,80818.1,257427,551100,1.60569e+06,1.05601e+07,3.4604e+07,8.205e+07,1.72123e+08,3.12152e+08,5.12498e+08,7.27333e+08,8.7852e+08,9.67089e+08,1.02904e+09,1.07422e+09,1.09979e+09,1.10784e+09,1.10362e+09,1.0885e+09,1.0641e+09,1.03352e+09,9.98735e+08,9.56863e+08,9.01215e+08,8.27167e+08,7.36072e+08,6.33636e+08,5.26431e+08,4.20805e+08,3.22976e+08,2.3798e+08,1.6839e+08,1.14306e+08,7.42569e+07,4.60368e+07,2.71928e+07,1.53094e+07,8.23837e+06,4.25916e+06,2.13068e+06,1.04089e+06,502220,242602,119131,60359.5,31907,17673.5,10227.8,6136.16,3781.53,2374.05,1508.24,964.613,618.468,396.12,252.669,160.084,100.52};
Double_t Mu2012D_208686Down[60]={13087.1,44709.1,105071,434061,777832,5.8845e+06,2.80082e+07,7.67953e+07,1.77721e+08,3.45701e+08,5.9261e+08,8.45502e+08,1.00676e+09,1.09978e+09,1.166e+09,1.20749e+09,1.22348e+09,1.22122e+09,1.20414e+09,1.17441e+09,1.13651e+09,1.09263e+09,1.03692e+09,9.59722e+08,8.57751e+08,7.36925e+08,6.06883e+08,4.77173e+08,3.57107e+08,2.54272e+08,1.723e+08,1.10927e+08,6.76115e+07,3.8885e+07,2.10803e+07,1.07979e+07,5.25696e+06,2.45467e+06,1.11261e+06,497050,222964,102523,49247.1,24998.4,13418.3,7552.49,4403.56,2629.3,1593.05,972.615,595.085,363.198,220.258,132.285,78.4722,45.8806,26.3971,14.9274,8.28971,4.51816};
Double_t MC_DYJetsToLL_S10[60]= {79,179,370,1580,2962,8227,60806,185170,319072,422705,512401,625058,783320,993941,1.25259e+06,1.51622e+06,1.68674e+06,1.74488e+06,1.70723e+06,1.61771e+06,1.52583e+06,1.45378e+06,1.38827e+06,1.32866e+06,1.26708e+06,1.1986e+06,1.12037e+06,1.03812e+06,948803,857993,767355,678302,593331,510913,437794,369711,309135,255767,209810,169345,135661,107955,84470,65456,50348,38652,29108,21443,16065,11710,8521,6194,4474,3054,2182,1560,1061,725,503,154};


standalone_LumiReWeighting::standalone_LumiReWeighting(int year,int mode) {

  //std::cout << "=======================================================================" << std::endl;
  
  std::vector<float> MC_distr;
  std::vector<float> Lumi_distr;

  MC_distr.clear();
  Lumi_distr.clear();
  //std::cout << "Year " << year << std::endl;
  if(year!=2012 && year!=2013 && year!=2014 
     && year!=201550 && year!=201525 && year != 2015250 && year != 2016)
    {
      std::cout << "The year is not correct!! Reset to year 2016." << 
	std::endl;
      year=2016;
      std::cout << "Year " << year << std::endl;
    }
  switch (mode)
    {
    case 0:
      //std::cout << "Using central value " << std::endl;
      break;
    case 1:
      //std::cout << "Using +1 sigma 5% value " << std::endl;
      break;
    case -1:
      //std::cout << "Using -1 sigma 5% value " << std::endl;
      break;
    default:
      //std::cout << "Using central value " << std::endl;
      break;
    } // end of switch

  Int_t NBins = 60;
  if(year==2015250 ) NBins = 50;
  if(year==2016 ) NBins = 125;

  for( int i=0; i< NBins; ++i) {
    if(year==2012)
      {
	switch (mode){
	case 0:
	  Lumi_distr.push_back(Data2012[i]);
	  break;
	case 1:
	  Lumi_distr.push_back(Data2012Up[i]);
	  break;
	case -1:
	  Lumi_distr.push_back(Data2012Down[i]);
	  break;
	default:
	  Lumi_distr.push_back(Data2012[i]);
	  break;
	} // end of switch
	MC_distr.push_back(Summer2012_S10[i]);
      }

    else if(year==2013){
        switch (mode){
        case 0:
	  Lumi_distr.push_back(Data2012_1601[i]);
	  break;
	case 1:
	  Lumi_distr.push_back(Data2012_1601Up[i]);
	  break;
	case -1:
	  Lumi_distr.push_back(Data2012_1601Down[i]);
	  break;
	default:
          Lumi_distr.push_back(Data2012_1601[i]);
	  break;
        }
	MC_distr.push_back(Summer2012_S10[i]);
    }

    else if(year==2014){//for sherpa1.4
        switch (mode){
        case 0:
	  Lumi_distr.push_back(Data2012_1601[i]);
	  break;
	case 1:
	  Lumi_distr.push_back(Data2012_1601Up[i]);
	  break;
	case -1:
	  Lumi_distr.push_back(Data2012_1601Down[i]);
	  break;
	default:
          Lumi_distr.push_back(Data2012_1601[i]);
	  break;
        }
	MC_distr.push_back(Summer2012_S7[i]);
    }
    else if(year==201550)
      {
	switch (mode){
	case 0:
	  Lumi_distr.push_back(Data2015D[i]);
	  break;
	case 1:
	  Lumi_distr.push_back(Data2015D_80[i]);
	  break;
	case -1:
	  Lumi_distr.push_back(Data2015D[i]);
	  break;
	default:
	  Lumi_distr.push_back(Data2015D[i]);
	  break;
	} // end of switch
	MC_distr.push_back(MC_startup_50ns[i]);
      }

  else if(year==201525)
      {
	switch (mode){
	case 0:
	  Lumi_distr.push_back(Data2015D[i]);
	  break;
	case 1:
            Lumi_distr.push_back(Data2015D_up[i]);
	  break;
	case -1:
            Lumi_distr.push_back(Data2015D_dn[i]);
	  break;
	default:
	  Lumi_distr.push_back(Data2015D[i]);
	  break;
	} // end of switch
	MC_distr.push_back(MC_startup_25ns[i]);
      }
  else if(year==2015250)
      {
	switch (mode){
	case 0:
	  Lumi_distr.push_back(Data2015DGolden_new[i]);
	  break;
	case 1:
            Lumi_distr.push_back(Data2015DGolden_new_up[i]);
	  break;
	case -1:
            Lumi_distr.push_back(Data2015DGolden_new_dn[i]);
	  break;
	default:
	  abort();
	  //Lumi_distr.push_back(Data2015DSilver[i]);
	  break;
	} // end of switch
	MC_distr.push_back(MC_startup_25ns[i]);
      }

  else if(year==2016)
      {
	switch (mode){
	case 0:
	  Lumi_distr.push_back(Data2016Golden[i]);
	  break;
	case 1:
            Lumi_distr.push_back(Data2016Golden_up[i]);
	  break;
	case -1:
            Lumi_distr.push_back(Data2016Golden_dn[i]);
	  break;
	default:
	  abort();
	  //Lumi_distr.push_back(Data2016Golden[i]);
	  break;
	} // end of switch
	MC_distr.push_back(MC_2016_25ns_Moriond17[i]);
      }
  } // end of loop over bins

  // no histograms for input: use vectors
  
  // now, make histograms out of them:

  // first, check they are the same size...

  if( MC_distr.size() != Lumi_distr.size() ){   
    std::cout << "MC_distr.size() = " << MC_distr.size() << std::endl;
    std::cout << "Lumi_distr.size() = " << Lumi_distr.size() << std::endl;
    std::cerr <<"ERROR: standalone_LumiReWeighting: input vectors have different sizes. Quitting... \n";

  }


  weights_ = new TH1F(Form("luminumer_%d",mode),
		      Form("luminumer_%d",mode),
		      NBins,0., float(NBins));

  TH1F* den = new TH1F(Form("lumidenom_%d",mode),
		       Form("lumidenom_%d",mode),
		       NBins,0., float(NBins));

  for(int ibin = 1; ibin<NBins+1; ++ibin ) {
    weights_->SetBinContent(ibin, Lumi_distr[ibin-1]);
    den->SetBinContent(ibin,MC_distr[ibin-1]);
  }

  //std::cout << "Data Input " << std::endl;
  //for(int ibin = 1; ibin<NBins+1; ++ibin){
    //std::cout << "   " << ibin-1 << " " << weights_->GetBinContent(ibin) << std::endl;
  //}
  //std::cout << "MC Input " << std::endl;
  //for(int ibin = 1; ibin<NBins+1; ++ibin){
    //std::cout << "   " << ibin-1 << " " << den->GetBinContent(ibin) << std::endl;
  //}

  // check integrals, make sure things are normalized

  float deltaH = weights_->Integral();
  if(fabs(1.0 - deltaH) > 0.02 ) { //*OOPS*...
    weights_->Scale( 1.0/ weights_->Integral() );
  }
  float deltaMC = den->Integral();
  if(fabs(1.0 - deltaMC) > 0.02 ) {
    den->Scale(1.0/ den->Integral());
  }

  weights_->Divide( den );  // so now the average weight should be 1.0    

  double inte = 0;
  for(int ibin = 1; ibin < NBins+1; ++ibin){
    inte += weights_->GetBinContent(ibin) * MC_distr[ibin-1];
  }

  std::cout << "PU weight normalisation: " << inte << "\n";

//  weights_->Scale(1/weights_->Integral());//Bugra Bilin, added this to normalize weigts.

  //std::cout << "Reweighting: Computed Weights per In-Time Nint " << std::endl;


  //for(int ibin = 1; ibin<NBins+1; ++ibin){
    //std::cout << "   " << ibin-1 << " " << weights_->GetBinContent(ibin) << std::endl;
  //}

  //   weightOOT_init();
  //std::cout << "=======================================================================" << std::endl;

}

standalone_LumiReWeighting::~standalone_LumiReWeighting()
{
}



double standalone_LumiReWeighting::weight( int npv ) {
  int bin = weights_->GetXaxis()->FindBin( npv );
  return weights_->GetBinContent( bin );
}

#if 0
void standalone_LumiReWeighting::weightOOT_init() {

  // The following are poisson distributions with different means, where the maximum
  // of the function has been normalized to weight 1.0
  // These are used to reweight the out-of-time pileup to match the in-time distribution.
  // The total event weight is the product of the in-time weight, the out-of-time weight,
  // and a residual correction to fix the distortions caused by the fact that the out-of-time
  // distribution is not flat.

  static double weight_24[25] = {
    0,
    0,
    0,
    0,
    2.46277e-06,
    2.95532e-05,
    0.000104668,
    0.000401431,
    0.00130034,
    0.00342202,
    0.00818132,
    0.0175534,
    0.035784,
    0.0650836,
    0.112232,
    0.178699,
    0.268934,
    0.380868,
    0.507505,
    0.640922,
    0.768551,
    0.877829,
    0.958624,
    0.99939,
    1
  };

  static double weight_23[25] = {
    0,
    1.20628e-06,
    1.20628e-06,
    2.41255e-06,
    1.20628e-05,
    6.39326e-05,
    0.000252112,
    0.000862487,
    0.00244995,
    0.00616527,
    0.0140821,
    0.0293342,
    0.0564501,
    0.100602,
    0.164479,
    0.252659,
    0.36268,
    0.491427,
    0.627979,
    0.75918,
    0.873185,
    0.957934,
    0.999381,
    1,
    0.957738
  };

  static double weight_22[25] = {
    0,
    0,
    0,
    5.88636e-06,
    3.0609e-05,
    0.000143627,
    0.000561558,
    0.00173059,
    0.00460078,
    0.0110616,
    0.0238974,
    0.0475406,
    0.0875077,
    0.148682,
    0.235752,
    0.343591,
    0.473146,
    0.611897,
    0.748345,
    0.865978,
    0.953199,
    0.997848,
    1,
    0.954245,
    0.873688
  };

  static double weight_21[25] = {
    0,
    0,
    1.15381e-06,
    8.07665e-06,
    7.1536e-05,
    0.000280375,
    0.00107189,
    0.00327104,
    0.00809396,
    0.0190978,
    0.0401894,
    0.0761028,
    0.13472,
    0.216315,
    0.324649,
    0.455125,
    0.598241,
    0.739215,
    0.861866,
    0.953911,
    0.998918,
    1,
    0.956683,
    0.872272,
    0.76399
  };
 
 
  static double weight_20[25] = {
    0,
    0,
    1.12532e-06,
    2.58822e-05,
    0.000145166,
    0.000633552,
    0.00215048,
    0.00592816,
    0.0145605,
    0.0328367,
    0.0652649,
    0.11893,
    0.19803,
    0.305525,
    0.436588,
    0.581566,
    0.727048,
    0.8534,
    0.949419,
    0.999785,
    1,
    0.953008,
    0.865689,
    0.753288,
    0.62765
  }; 
  static double weight_19[25] = {
    0,
    0,
    1.20714e-05,
    5.92596e-05,
    0.000364337,
    0.00124994,
    0.00403953,
    0.0108149,
    0.025824,
    0.0544969,
    0.103567,
    0.17936,
    0.283532,
    0.416091,
    0.562078,
    0.714714,
    0.846523,
    0.947875,
    1,
    0.999448,
    0.951404,
    0.859717,
    0.742319,
    0.613601,
    0.48552
  };

  static double weight_18[25] = {
    0,
    3.20101e-06,
    2.88091e-05,
    0.000164319,
    0.000719161,
    0.00250106,
    0.00773685,
    0.0197513,
    0.0443693,
    0.0885998,
    0.159891,
    0.262607,
    0.392327,
    0.543125,
    0.69924,
    0.837474,
    0.943486,
    0.998029,
    1,
    0.945937,
    0.851807,
    0.729309,
    0.596332,
    0.467818,
    0.350434
  };

 
  static double weight_17[25] = {
    1.03634e-06,
    7.25437e-06,
    4.97443e-05,
    0.000340956,
    0.00148715,
    0.00501485,
    0.0143067,
    0.034679,
    0.0742009,
    0.140287,
    0.238288,
    0.369416,
    0.521637,
    0.682368,
    0.828634,
    0.939655,
    1,
    0.996829,
    0.94062,
    0.841575,
    0.716664,
    0.582053,
    0.449595,
    0.331336,
    0.234332
  };

 
  static double weight_16[25] = {
    4.03159e-06,
    2.41895e-05,
    0.000141106,
    0.00081942,
    0.00314565,
    0.00990662,
    0.026293,
    0.0603881,
    0.120973,
    0.214532,
    0.343708,
    0.501141,
    0.665978,
    0.820107,
    0.938149,
    1,
    0.99941,
    0.940768,
    0.837813,
    0.703086,
    0.564023,
    0.42928,
    0.312515,
    0.216251,
    0.14561
  };
 
 
  static double weight_15[25] = {
    9.76084e-07,
    5.07564e-05,
    0.000303562,
    0.00174036,
    0.00617959,
    0.0188579,
    0.047465,
    0.101656,
    0.189492,
    0.315673,
    0.474383,
    0.646828,
    0.809462,
    0.934107,
    0.998874,
    1,
    0.936163,
    0.827473,
    0.689675,
    0.544384,
    0.40907,
    0.290648,
    0.198861,
    0.12951,
    0.0808051
  };
 
 
  static double weight_14[25] = {
    1.13288e-05,
    0.000124617,
    0.000753365,
    0.00345056,
    0.0123909,
    0.0352712,
    0.0825463,
    0.16413,
    0.287213,
    0.44615,
    0.625826,
    0.796365,
    0.930624,
    0.999958,
    1,
    0.934414,
    0.816456,
    0.672939,
    0.523033,
    0.386068,
    0.269824,
    0.180342,
    0.114669,
    0.0698288,
    0.0406496
  };

 
  static double weight_13[25] = {
    2.54296e-05,
    0.000261561,
    0.00167018,
    0.00748083,
    0.0241308,
    0.0636801,
    0.138222,
    0.255814,
    0.414275,
    0.600244,
    0.779958,
    0.92256,
    0.999155,
    1,
    0.927126,
    0.804504,
    0.651803,
    0.497534,
    0.35976,
    0.245834,
    0.160904,
    0.0991589,
    0.0585434,
    0.0332437,
    0.0180159
  };

  static double weight_12[25] = {
    5.85742e-05,
    0.000627706,
    0.00386677,
    0.0154068,
    0.0465892,
    0.111683,
    0.222487,
    0.381677,
    0.5719,
    0.765001,
    0.915916,
    1,
    0.999717,
    0.921443,
    0.791958,
    0.632344,
    0.475195,
    0.334982,
    0.223666,
    0.141781,
    0.0851538,
    0.048433,
    0.0263287,
    0.0133969,
    0.00696683
  };

 
  static double weight_11[25] = {
    0.00015238,
    0.00156064,
    0.00846044,
    0.0310939,
    0.0856225,
    0.187589,
    0.343579,
    0.541892,
    0.74224,
    0.909269,
    0.998711,
    1,
    0.916889,
    0.77485,
    0.608819,
    0.447016,
    0.307375,
    0.198444,
    0.121208,
    0.070222,
    0.0386492,
    0.0201108,
    0.0100922,
    0.00484937,
    0.00222458
  };

  static double weight_10[25] = {
    0.000393044,
    0.00367001,
    0.0179474,
    0.060389,
    0.151477,
    0.302077,
    0.503113,
    0.720373,
    0.899568,
    1,
    0.997739,
    0.909409,
    0.75728,
    0.582031,
    0.415322,
    0.277663,
    0.174147,
    0.102154,
    0.0566719,
    0.0298642,
    0.0147751,
    0.00710995,
    0.00319628,
    0.00140601,
    0.000568796
  };

 
  static double weight_9[25] = {
    0.00093396,
    0.00854448,
    0.0380306,
    0.113181,
    0.256614,
    0.460894,
    0.690242,
    0.888781,
    1,
    0.998756,
    0.899872,
    0.735642,
    0.552532,
    0.382726,
    0.246114,
    0.147497,
    0.0825541,
    0.0441199,
    0.0218157,
    0.0103578,
    0.00462959,
    0.0019142,
    0.000771598,
    0.000295893,
    0.000111529
  };

 
  static double weight_8[25] = {
    0.00240233,
    0.0192688,
    0.0768653,
    0.205008,
    0.410958,
    0.65758,
    0.875657,
    0.999886,
    1,
    0.889476,
    0.711446,
    0.517781,
    0.345774,
    0.212028,
    0.121208,
    0.0644629,
    0.0324928,
    0.0152492,
    0.00673527,
    0.0028547,
    0.00117213,
    0.000440177,
    0.000168471,
    5.80689e-05,
    1.93563e-05
  };

  static double weight_7[25] = {
    0.00617233,
    0.0428714,
    0.150018,
    0.350317,
    0.612535,
    0.856525,
    0.999923,
    1,
    0.87544,
    0.679383,
    0.478345,
    0.303378,
    0.176923,
    0.0950103,
    0.0476253,
    0.0222211,
    0.00972738,
    0.00392962,
    0.0015258,
    0.000559168,
    0.000183928,
    6.77983e-05,
    1.67818e-05,
    7.38398e-06,
    6.71271e-07
  };
 
  static double weight_6[25] = {
    0.0154465,
    0.0923472,
    0.277322,
    0.55552,
    0.833099,
    0.999035,
    1,
    0.855183,
    0.641976,
    0.428277,
    0.256804,
    0.139798,
    0.0700072,
    0.0321586,
    0.0137971,
    0.00544756,
    0.00202316,
    0.000766228,
    0.000259348,
    8.45836e-05,
    1.80362e-05,
    8.70713e-06,
    3.73163e-06,
    6.21938e-07,
    0
  };
 
 
  static double weight_5[25] = {
    0.0382845,
    0.191122,
    0.478782,
    0.797314,
    1,
    0.997148,
    0.831144,
    0.59461,
    0.371293,
    0.205903,
    0.103102,
    0.0471424,
    0.0194997,
    0.00749415,
    0.00273709,
    0.000879189,
    0.000286049,
    0.000102364,
    1.70606e-05,
    3.98081e-06,
    2.27475e-06,
    0,
    0,
    0,
    0
  };
 
 
  static double weight_4[25] = {
    0.0941305,
    0.373824,
    0.750094,
    1,
    0.997698,
    0.800956,
    0.532306,
    0.304597,
    0.152207,
    0.0676275,
    0.0270646,
    0.00975365,
    0.00326077,
    0.00101071,
    0.000301781,
    7.41664e-05,
    1.58563e-05,
    3.58045e-06,
    1.02299e-06,
    0,
    5.11493e-07,
    0,
    0,
    0,
    0
  };
 
 
  static double weight_3[25] = {
    0.222714,
    0.667015,
    1,
    0.999208,
    0.750609,
    0.449854,
    0.224968,
    0.0965185,
    0.0361225,
    0.012084,
    0.00359618,
    0.000977166,
    0.000239269,
    6.29422e-05,
    1.16064e-05,
    1.78559e-06,
    0,
    4.46398e-07,
    0,
    0,
    0,
    0,
    0,
    0,
    0
  };
 
  static double weight_2[25] = {
    0.499541,
    0.999607,
    1,
    0.666607,
    0.333301,
    0.13279,
    0.0441871,
    0.0127455,
    0.00318434,
    0.00071752,
    0.000132204,
    2.69578e-05,
    5.16999e-06,
    2.21571e-06,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
  };
 
  static double weight_1[25] = {
    0.999165,
    1,
    0.499996,
    0.166868,
    0.0414266,
    0.00831053,
    0.00137472,
    0.000198911,
    2.66302e-05,
    2.44563e-06,
    2.71737e-07,
    2.71737e-07,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
  };
 
  static double weight_0[25] = {
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
  };

  double* WeightPtr = 0;

  for(int iint = 0; iint<25; ++iint){
    if(iint ==0) WeightPtr = weight_0;
    if(iint ==1) WeightPtr = weight_1;
    if(iint ==2) WeightPtr = weight_2;
    if(iint ==3) WeightPtr = weight_3;
    if(iint ==4) WeightPtr = weight_4;
    if(iint ==5) WeightPtr = weight_5;
    if(iint ==6) WeightPtr = weight_6;
    if(iint ==7) WeightPtr = weight_7;
    if(iint ==8) WeightPtr = weight_8;
    if(iint ==9) WeightPtr = weight_9;
    if(iint ==10) WeightPtr = weight_10;
    if(iint ==11) WeightPtr = weight_11;
    if(iint ==12) WeightPtr = weight_12;
    if(iint ==13) WeightPtr = weight_13;
    if(iint ==14) WeightPtr = weight_14;
    if(iint ==15) WeightPtr = weight_15;
    if(iint ==16) WeightPtr = weight_16;
    if(iint ==17) WeightPtr = weight_17;
    if(iint ==18) WeightPtr = weight_18;
    if(iint ==19) WeightPtr = weight_19;
    if(iint ==20) WeightPtr = weight_20;
    if(iint ==21) WeightPtr = weight_21;
    if(iint ==22) WeightPtr = weight_22;
    if(iint ==23) WeightPtr = weight_23;
    if(iint ==24) WeightPtr = weight_24;

  }
}
#endif

#endif
